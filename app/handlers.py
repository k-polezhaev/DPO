import logging
from telegram import Update
from telegram.ext import ContextTypes

import app.keyboards as kb

from app.AI.AI import QAModel

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.username} ({user.id}).")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –æ–¥–µ–∂–¥—ã. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º-–Ω–∏–±—É–¥—å!",
        reply_markup=kb.main
    )

async def handle_button_zadat_vopros(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –æ—Ç {update.effective_user.username}")
    await update.message.reply_text( f"–°–ª—É—à–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!",)


async def handle_button_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π' –æ—Ç {update.effective_user.username}")
    await update.message.reply_text('–í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç—Ç–∏—Ö —Ä–µ–±—è—Ç:')
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, '–õ–∏—Ç–≤–∏–Ω–µ–Ω–∫–æ –≠–º–º–∞–Ω—É–∏–ª - https://vk.com/iamdiedinside')
    await context.bot.send_message(chat_id, '–ü–æ–ø–æ–≤ –í–∏—Ç–∞–ª–∏–π - https://vk.com/pvitalys')
    await context.bot.send_message(chat_id, '–ü–æ–ª–µ–∂–∞–µ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω - https://vk.com/pojodul')
    await context.bot.send_message(chat_id, '–ú–∏–ª—å–∫–æ –ê—Ä—Ç—ë–º - https://vk.com/aaaaaaa_aaaa_a')
    await context.bot.send_message(chat_id, '–ú—É—Ä—Å–µ–∫–∞–µ–≤ –ò–ª—å—è—Å - https://vk.com/mylogin_7958_password_9ukj4ixxxx')


async def handle_button_storage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ì–ª–∞–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ' –æ—Ç {update.effective_user.username}")
    await update.message.reply_text('–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: —Å—Å—ã–ª–∫–∞[https://drive.google.com/drive/folders/11NH-FT2Mtcy8AcUBanpYeH-vTRZARabO?usp=sharing]')


async def handle_button_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ö–æ—Ä–æ—Ç–∫–æ –æ –ø—Ä–æ–µ–∫—Ç–µ' –æ—Ç {update.effective_user.username}")
    await update.message.reply_text('–ù–∞—à –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ Telegram-—á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π. –û–Ω –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∞ —Ä–æ–ª–∏: –≠–º–º–∞–Ω—É–∏–ª –õ–∏—Ç–≤–∏–Ω–µ–Ω–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–ª –≤—Å–µ —ç—Ç–∞–ø—ã –∫–∞–∫ —Ç–∏–º–ª–∏–¥, –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ü–æ–ª–µ–∂–∞–µ–≤ –∏ –ò–ª—å—è—Å –ú—É—Ä—Å–µ–∫–∞–µ–≤ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –∫–æ–¥–æ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –ê—Ä—Ç—ë–º –ú–∏–ª—å–∫–æ —Å–æ–±–∏—Ä–∞–ª –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –¥–∞—Ç–∞—Å–µ—Ç, –∞ –í–∏—Ç–∞–ª–∏–π –ü–æ–ø–æ–≤ –æ—Ñ–æ—Ä–º–ª—è–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é. üöÄ')


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_question = update.message.text
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username} ({user.id}): {user_question}")

    if 'qa_model' not in context.application.bot_data or not isinstance(context.application.bot_data['qa_model'], QAModel):
         logger.error("–ò–Ω—Å—Ç–∞–Ω—Å QAModel –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.application.bot_data.")
         await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
         return

    qa_model: QAModel = context.application.bot_data['qa_model']

    answer = qa_model.getBestAnswer(user_question)

    await update.message.reply_text(answer)

